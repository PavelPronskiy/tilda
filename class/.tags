!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Encryption	encryption.class.php	/^class Encryption$/;"	c
__construct	encryption.class.php	/^	function __construct()$/;"	f
config	encryption.class.php	/^		$this->config = Config::getConfig();$/;"	v
skey	encryption.class.php	/^		$this->skey = $this->config->salt;$/;"	v
safe_b64encode	encryption.class.php	/^	public  function safe_b64encode($string)$/;"	f
data	encryption.class.php	/^		$data = base64_encode($string);$/;"	v
data	encryption.class.php	/^		$data = str_replace(array('+','\/','='),array('-','_',''),$data);$/;"	v
safe_b64decode	encryption.class.php	/^	public function safe_b64decode($string)$/;"	f
data	encryption.class.php	/^		$data = str_replace(array('-','_'),array('+','\/'),$string);$/;"	v
mod4	encryption.class.php	/^		$mod4 = strlen($data) % 4;$/;"	v
encode	encryption.class.php	/^	public function encode($value)$/;"	f
text	encryption.class.php	/^		$text = $value;$/;"	v
iv_size	encryption.class.php	/^		$iv_size = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB);$/;"	v
iv	encryption.class.php	/^		$iv = mcrypt_create_iv($iv_size, MCRYPT_RAND);$/;"	v
crypttext	encryption.class.php	/^		$crypttext = mcrypt_encrypt(MCRYPT_RIJNDAEL_256, $this->skey, $text, MCRYPT_MODE_ECB, $iv);$/;"	v
decode	encryption.class.php	/^	public function decode($value)$/;"	f
crypttext	encryption.class.php	/^		$crypttext = $this->safe_b64decode($value);$/;"	v
iv_size	encryption.class.php	/^		$iv_size = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB);$/;"	v
iv	encryption.class.php	/^		$iv = mcrypt_create_iv($iv_size, MCRYPT_RAND);$/;"	v
decrypttext	encryption.class.php	/^		$decrypttext = mcrypt_decrypt(MCRYPT_RIJNDAEL_256, $this->skey, $crypttext, MCRYPT_MODE_ECB, $iv);$/;"	v
Config	config.class.php	/^class Config$/;"	c
getConfig	config.class.php	/^	public static function getConfig()$/;"	f
array	config.class.php	/^		$array = [];$/;"	v
config_json	config.class.php	/^		$config_json = [];$/;"	v
config_user_json	config.class.php	/^		$config_user_json = [];$/;"	v
config_json	config.class.php	/^			$config_json = json_decode(file_get_contents(CONFIG));$/;"	v
config_user_json	config.class.php	/^			$config_user_json = json_decode(file_get_contents(CONFIG_USER));$/;"	v
array	config.class.php	/^		$array = (object)array_merge((array)$config_json, (array)$config_user_json);$/;"	v
Controller	cache.class.php	/^class Controller$/;"	c
hash	cache.class.php	/^	public $hash = '';$/;"	v
__construct	cache.class.php	/^	function __construct()$/;"	f
config	cache.class.php	/^		$this->config = \\Tilda\\Config::getConfig();$/;"	v
__destruct	cache.class.php	/^	function __destruct() {}$/;"	f
redisInstance	cache.class.php	/^	private function redisInstance() {$/;"	f
redis	cache.class.php	/^		$this->redis = new \\Redis();$/;"	v
notice	cache.class.php	/^	public function notice($message)$/;"	f
host_str	cache.class.php	/^		$host_str = 'Host: ' . $_SERVER['HTTP_HOST'];$/;"	v
flush	cache.class.php	/^	public function flush($cache)$/;"	f
keys	cache.class.php	/^		$keys = $_SERVER['HTTP_HOST'] . '*';$/;"	v
pages	cache.class.php	/^				$pages = $this->redis->keys($keys);$/;"	v
pages	cache.class.php	/^				$pages = $this->redis->keys($keys);$/;"	v
get	cache.class.php	/^	public function get($hash = '')$/;"	f
hash	cache.class.php	/^		$hash = !empty($hash) ? $hash : $this->hash;$/;"	v
set	cache.class.php	/^	public function set($body, $hash = '', $expire = '')$/;"	f
expire	cache.class.php	/^		$expire = !empty($expire) ? $expire : $this->config->cache->expire;$/;"	v
hash	cache.class.php	/^		$hash = !empty($hash) ? $hash : $this->hash;$/;"	v
Controller	tilda.class.php	/^class Controller$/;"	c
__construct	tilda.class.php	/^	function __construct()$/;"	f
curl	tilda.class.php	/^		$this->curl = \\curl_init();$/;"	v
config	tilda.class.php	/^		$this->config = Config::getConfig();$/;"	v
cache	tilda.class.php	/^		$this->cache = new \\Cache\\Controller;$/;"	v
encrypt	tilda.class.php	/^		$this->encrypt = new Encryption();$/;"	v
etag	tilda.class.php	/^		$this->etag = '';$/;"	v
__destruct	tilda.class.php	/^	function __destruct()$/;"	f
headersPrepare	tilda.class.php	/^	private function headersPrepare($headers, $tag)$/;"	f
h	tilda.class.php	/^			$h = explode(':', trim($header));$/;"	v
get	tilda.class.php	/^	private function get($url)$/;"	f
response	tilda.class.php	/^		$response = curl_exec($this->curl);$/;"	v
header_size	tilda.class.php	/^		$header_size = curl_getinfo($this->curl, CURLINFO_HEADER_SIZE);$/;"	v
http_code	tilda.class.php	/^		$http_code = curl_getinfo($this->curl, CURLINFO_HTTP_CODE);$/;"	v
header	tilda.class.php	/^			$header = substr($response, 0, $header_size);$/;"	v
curlErrorHandler	tilda.class.php	/^	private function curlErrorHandler($http_code)$/;"	f
encryptUrl	tilda.class.php	/^	private function encryptUrl($string)$/;"	f
decryptUrl	tilda.class.php	/^	private function decryptUrl($string)$/;"	f
parseURL	tilda.class.php	/^	private function parseURL($src)$/;"	f
url	tilda.class.php	/^		$url = parse_url($src);$/;"	v
removeTags	tilda.class.php	/^	private function removeTags($html)$/;"	f
dom_html5	tilda.class.php	/^		$dom_html5 = new \\Masterminds\\HTML5([$/;"	v
dom	tilda.class.php	/^		$dom = $dom_html5->loadHTML($html);$/;"	v
tildacopy	tilda.class.php	/^		$tildacopy = $dom->getElementById('tildacopy');$/;"	v
metatags	tilda.class.php	/^		$metatags = $dom->getElementsByTagName('meta');$/;"	v
scripts	tilda.class.php	/^		$scripts = $dom->getElementsByTagName('script');$/;"	v
linktags	tilda.class.php	/^		$linktags = $dom->getElementsByTagName('link');$/;"	v
imgs	tilda.class.php	/^		$imgs = $dom->getElementsByTagName('img');$/;"	v
xpath	tilda.class.php	/^		$xpath = new \\DOMXPath($dom);$/;"	v
src	tilda.class.php	/^					$src = $link->getAttribute('href');$/;"	v
parse_src	tilda.class.php	/^						$parse_src = $this->parseURL($src);$/;"	v
src	tilda.class.php	/^							$src = $link->getAttribute('href');$/;"	v
parse_src	tilda.class.php	/^								$parse_src = $this->parseURL($src);$/;"	v
src	tilda.class.php	/^					$src = $script->getAttribute('src');$/;"	v
parse_src	tilda.class.php	/^						$parse_src = $this->parseURL($src);$/;"	v
content	tilda.class.php	/^							$content = $meta->getAttribute('content');$/;"	v
content	tilda.class.php	/^							$content = $meta->getAttribute('content');$/;"	v
src	tilda.class.php	/^					$src = $img->getAttribute('src');$/;"	v
parse_src	tilda.class.php	/^						$parse_src = $this->parseURL($src);$/;"	v
getImageContentType	tilda.class.php	/^	private function getImageContentType($img)$/;"	f
mimes	tilda.class.php	/^		$mimes = new \\Mimey\\MimeTypes;$/;"	v
route	tilda.class.php	/^	private function route()$/;"	f
request_uri	tilda.class.php	/^		$request_uri = (object)parse_url($_SERVER['REQUEST_URI']);$/;"	v
query	tilda.class.php	/^			$query = (object)$query;$/;"	v
getItem	tilda.class.php	/^	private function getItem($query, $type = '')$/;"	f
hash	tilda.class.php	/^		$hash = $_SERVER['HTTP_HOST'] . ':' . $query;$/;"	v
type	tilda.class.php	/^		$type = !empty($type)$/;"	v
data	tilda.class.php	/^			$data = $this->cache->get($hash);$/;"	v
data	tilda.class.php	/^				$data = $this->get($this->decryptUrl($query));$/;"	v
data	tilda.class.php	/^			$data = $this->get($this->decryptUrl($query));$/;"	v
render	tilda.class.php	/^	private function render($data, $mime)$/;"	f
tildaInstance	tilda.class.php	/^	private function tildaInstance($request_uri)$/;"	f
host	tilda.class.php	/^		$host = $this->getTildaHost();$/;"	v
req_path	tilda.class.php	/^		$req_path = isset($request_uri->path) ? $request_uri->path : '';$/;"	v
site	tilda.class.php	/^		$this->site = $host->proto . ':\/\/' . $host->site . $req_path;$/;"	v
tilda	tilda.class.php	/^		$this->tilda = $host->tilda;$/;"	v
tilda	tilda.class.php	/^		$tilda = 'http:\/\/' . $host->tilda . $req_path;$/;"	v
cache	tilda.class.php	/^			$cache = $this->cache->get();$/;"	v
cache	tilda.class.php	/^			$cache = false;$/;"	v
body	tilda.class.php	/^			$body = $this->get($tilda);$/;"	v
body	tilda.class.php	/^				$body = $this->removeTags($body);$/;"	v
getTildaHost	tilda.class.php	/^	private function getTildaHost()$/;"	f
